#include <Wire.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

MAX30105 particleSensor;

// OLED SSD1315 128x64
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Pin ƒë·ªçc ƒëi·ªán √°p pin qua chia √°p (VD: GPIO34)
#define BATTERY_PIN 34
// Gi√° tr·ªã ƒëi·ªán √°p max c·ªßa pin Li-ion (4.2V)
#define BATTERY_MAX 4.20
// Gi√° tr·ªã ƒëi·ªán √°p min khi c·∫°n (3.0V)
#define BATTERY_MIN 3.00

#define MAX_BRIGHTNESS 255

const char* localMqttServer = "192.168.1.100"; // IP m√°y t√≠nh c·ªßa b·∫°n
const int localMqttPort = 1883;               // Port broker m√°y t√≠nh
const char* localMqttClientId = "esp32_ppg";
const char* localMqttUsername = "";           // N·∫øu broker kh√¥ng y√™u c·∫ßu user/pass th√¨ ƒë·ªÉ tr·ªëng
const char* localMqttPassword = "";

// T·∫°o k·∫øt n·ªëi ri√™ng cho broker m√°y t√≠nh
WiFiClient localEspClient;
PubSubClient localClient(localEspClient);

const char* ssid = "BXT235";
const char* password = "321Thai@";
const char* mqttServer = "nxchieu.duckdns.org";
const int mqttPort = 11883;
const char* mqttClientId = "jy2fl048z8fdaj4gxdc9";
const char* mqttUsername = "3j84yqow1tugy0kjbiix";
const char* mqttPassword = "xzzad47wbsittxqno50c";

unsigned long lastSampleTime = 0;
const int sampleIntervalMs = 8; // 125 Hz = 8ms/m·∫´u
unsigned long sampleIndex = 0;

WiFiClient espClient;
PubSubClient client(espClient);

// ESP32 c√≥ ƒë·ªß RAM ƒë·ªÉ s·ª≠ d·ª•ng 32-bit data
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data

int32_t bufferLength; //data length
int32_t spo2; //SPO2 value
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //heart rate value
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid
String status;

// Th√™m bi·∫øn ƒë·ªÉ t√≠nh Average BPM
float avgHeartRate = 0;
int validReadings = 0;
unsigned long lastUpdate = 0;
unsigned long lastMqttSend = 0; // Th√™m bi·∫øn ƒë·ªÉ ki·ªÉm so√°t t·∫ßn su·∫•t g·ª≠i MQTT

// ESP32 built-in LED pin
#define LED_BUILTIN 2

void setupWiFi() {
  Serial.print("üîå K·∫øt n·ªëi WiFi...");
  WiFi.begin(ssid, password);
  
  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(500);
    Serial.print(".");
    attempts++;
  }
  
  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ WiFi ƒë√£ k·∫øt n·ªëi");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
    Serial.print("Signal Strength: ");
    Serial.println(WiFi.RSSI());
  } else {
    Serial.println("\n‚ùå WiFi k·∫øt n·ªëi th·∫•t b·∫°i!");
  }
}

void reconnectLocalMQTT() {
  while (!localClient.connected()) {
    Serial.print("üîÑ K·∫øt n·ªëi MQTT Local... ");
    if (localClient.connect(localMqttClientId, localMqttUsername, localMqttPassword)) {
      Serial.println("‚úÖ MQTT Local ƒë√£ k·∫øt n·ªëi");
    } else {
      Serial.print("‚ùå L·ªói MQTT Local: ");
      Serial.print(localClient.state());
      Serial.println(" -> th·ª≠ l·∫°i sau 2s");
      delay(2000);
    }
  }
}

void reconnectMQTT() {
  int attempts = 0;
  while (!client.connected() && attempts < 3) {
    Serial.print("üîÑ K·∫øt n·ªëi MQTT... ");
    
    if (client.connect(mqttClientId, mqttUsername, mqttPassword)) {
      Serial.println("‚úÖ MQTT ƒë√£ k·∫øt n·ªëi");
      
      // Test g·ª≠i m·ªôt message ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi
      String testPayload = "{\"test\": \"connection_ok\", \"timestamp\": " + String(millis()) + "}";
      boolean result = client.publish("v1/devices/me/telemetry", testPayload.c_str());
      Serial.print("üì§ Test message sent: ");
      Serial.println(result ? "SUCCESS" : "FAILED");
      
    } else {
      Serial.print("‚ùå L·ªói MQTT: ");
      Serial.print(client.state());
      Serial.println(" -> th·ª≠ l·∫°i sau 2s");
      delay(2000);
      attempts++;
    }
  }
  
  if (!client.connected()) {
    Serial.println("‚ùå MQTT k·∫øt n·ªëi th·∫•t b·∫°i sau 3 l·∫ßn th·ª≠!");
  }
}

// H√†m ƒë·ªçc ƒëi·ªán √°p pin th·ª±c t·∫ø
float readBatteryVoltage() {
  int adcValue = analogRead(BATTERY_PIN);
  float voltage = (adcValue / 4095.0) * 3.3 * 2; // Gi·∫£ s·ª≠ d√πng m·∫°ch chia √°p 1:1
  return voltage;
}

void setup()
{
  Serial.begin(115200);
  Serial.println("\n=== ESP32 MAX30102 Heart Rate and SpO2 Monitor ===");
  
  setupWiFi();
  
  client.setServer(mqttServer, mqttPort);
  client.setKeepAlive(60);
  client.setSocketTimeout(5); // Timeout 5 gi√¢y

  // K·∫øt n·ªëi broker m√°y t√≠nh
  localClient.setServer(localMqttServer, localMqttPort);
  
  pinMode(LED_BUILTIN, OUTPUT);
  
  // Kh·ªüi t·∫°o I2C cho ESP32
  Wire.begin(21, 22); // SDA = GPIO21, SCL = GPIO22 (default cho ESP32)
  
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { 
    Serial.println(F("‚ùå SSD1315 kh√¥ng t√¨m th·∫•y"));
    for(;;); // D·ª´ng l·∫°i n·∫øu kh√¥ng t√¨m th·∫•y
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0,0);
  display.println("Starting...");
  display.display();

  // Kh·ªüi t·∫°o sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //400kHz speed
  {
    Serial.println("‚ùå MAX30102 was not found. Please check wiring/power.");
  } else {
    Serial.println("‚úÖ MAX30102 Found!");
  }

  Serial.println("Place your finger on the sensor with steady pressure.");
  Serial.println("Starting in 3 seconds...");
  delay(3000);

  // C·∫•u h√¨nh sensor t·ªëi ∆∞u cho ESP32
  byte ledBrightness = 50; //Options: 0=Off to 255=50mA
  byte sampleAverage = 4; //Options: 1, 2, 4, 8, 16, 32
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR, 3 = Red + IR + Green
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200
  int pulseWidth = 411; //Options: 69, 118, 215, 411
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange);
  
  // T·∫Øt c√°c ch·∫ø ƒë·ªô kh√¥ng c·∫ßn thi·∫øt
  particleSensor.setPulseAmplitudeRed(0x0A); //Turn Red LED to low to indicate sensor is running
  particleSensor.setPulseAmplitudeGreen(0); //Turn off Green LED
  
  Serial.println("=== Monitoring Started ===");
  Serial.println("BPM | Avg BPM | SpO2 | Battery | Status | MQTT");
  Serial.println("------------------------------------------------");
}

void loop(){
  // Ki·ªÉm tra k·∫øt n·ªëi WiFi
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("‚ùå WiFi m·∫•t k·∫øt n·ªëi, ƒëang k·∫øt n·ªëi l·∫°i...");
    setupWiFi();
  }
  
  // Ki·ªÉm tra v√† k·∫øt n·ªëi l·∫°i MQTT n·∫øu c·∫ßn
  if (!client.connected()) {
    reconnectMQTT();
  }
  client.loop();

  // MQTT Local
  if (!localClient.connected()) {
    reconnectLocalMQTT();
  }
  localClient.loop();

  bufferLength = 100; //buffer length 100 = 4 seconds of samples at 25sps

  // ƒê·ªçc 100 m·∫´u ƒë·∫ßu ti√™n
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //ch·ªù data m·ªõi
      particleSensor.check(); //ki·ªÉm tra sensor

    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample();
  }

  // T√≠nh heart rate v√† SpO2 sau 100 m·∫´u ƒë·∫ßu
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  // V√≤ng l·∫∑p ch√≠nh - c·∫≠p nh·∫≠t m·ªói gi√¢y
  while (1)
  {
    // Ki·ªÉm tra k·∫øt n·ªëi trong v√≤ng l·∫∑p
    if (!client.connected() && millis() - lastMqttSend > 10000) {
      Serial.println("‚ö†Ô∏è  MQTT m·∫•t k·∫øt n·ªëi trong loop");
      break; // Tho√°t v√≤ng l·∫∑p ƒë·ªÉ reconnect
    }
    client.loop();

    // D·ªãch chuy·ªÉn data: b·ªè 25 m·∫´u c≈©, gi·ªØ 75 m·∫´u cu·ªëi
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }

    // ƒê·ªçc 25 m·∫´u m·ªõi
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false)
        particleSensor.check();

      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample();
    }

    // T√≠nh to√°n l·∫°i HR v√† SpO2
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

    // C·∫≠p nh·∫≠t Average BPM (chia 2 ƒë·ªÉ c√≥ gi√° tr·ªã ch√≠nh x√°c)
    heartRate = heartRate / 2;
    if (validHeartRate == 1 && heartRate > 40 && heartRate < 200) {
      validReadings++;
      avgHeartRate = ((avgHeartRate * (validReadings - 1)) + heartRate) / validReadings;
      
      // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng readings ƒë·ªÉ tr√°nh overflow
      if (validReadings > 20) {
        validReadings = 20;
      }
    }
    //G·ª≠i Broker cho h·ªçc m√°y
    unsigned long now = millis();
    if (now - lastSampleTime >= sampleIntervalMs) {
      lastSampleTime = now;

      // ƒê·ªçc IR value t·ª´ c·∫£m bi·∫øn (d√πng l√†m PPG)
      long irValue = particleSensor.getIR();

      // T√≠nh th·ªùi gian (s)
      float timeSec = sampleIndex / 125.0;
      sampleIndex++;

      // T·∫°o chu·ªói CSV "Time,PPG"
      char payload[50];
      snprintf(payload, sizeof(payload), "%.3f,%ld", timeSec, irValue);

      // G·ª≠i l√™n MQTT
      localClient.publish("ppg/data", payload);
    }
    // ƒê·ªçc ƒëi·ªán √°p pin th·ª±c t·∫ø
    int batteryPercent = 95;

    // In k·∫øt qu·∫£ v√† g·ª≠i MQTT m·ªói 3 gi√¢y (gi·∫£m t·∫ßn su·∫•t ƒë·ªÉ ·ªïn ƒë·ªãnh)
    if (millis() - lastUpdate > 3000) {
      lastUpdate = millis();
      
      // Hi·ªÉn th·ªã BPM
      Serial.print("BPM: ");
      if (validHeartRate == 1 && heartRate > 40 && heartRate < 200) {
        Serial.print(heartRate);
      } else {
        Serial.print("--");
      }
      Serial.print(" | ");
      
      // Hi·ªÉn th·ªã Average BPM
      Serial.print("Avg: ");
      if (validReadings > 0) {
        Serial.print(avgHeartRate, 1);
      } else {
        Serial.print("--");
      }
      Serial.print(" | ");
      
      // Hi·ªÉn th·ªã SpO2
      Serial.print("SpO2: ");
      if (validSPO2 == 1 && spo2 > 80 && spo2 <= 100) {
        Serial.print(spo2);
        Serial.print("%");
      } else {
        Serial.print("--");
      }
      Serial.print(" | ");
      
      // Hi·ªÉn th·ªã battery
      Serial.print("Bat: ");
      Serial.print(batteryPercent);
      Serial.print("% | ");
      
      // Hi·ªÉn th·ªã tr·∫°ng th√°i
      if (irBuffer[99] < 50000) {
        status = "No finger detected";
        Serial.print(status);
        // Reset average khi kh√¥ng c√≥ ng√≥n tay
        avgHeartRate = 0;
        validReadings = 0;
      } else if (validHeartRate == 1 && validSPO2 == 1) {
        status = "Good signal";
        Serial.print(status);
      } else {
        status = "Poor signal - hold steady";
        Serial.print(status);
      }

      // G·ª≠i d·ªØ li·ªáu MQTT
      boolean mqttSuccess = false;
      if (client.connected()) {
        String payload;
        
        if (irBuffer[99] < 50000) {
          payload = "{\"BPM\":0, \"AvgBPM\":0, \"SpO2\":0, \"Battery\":" + String(batteryPercent) + 
                   ", \"Status\":\"No finger detected\", \"timestamp\":" + String(millis()) + "}";
        } else {
          // ƒê·∫£m b·∫£o d·ªØ li·ªáu h·ª£p l·ªá tr∆∞·ªõc khi g·ª≠i
          int sendBPM = (validHeartRate == 1 && heartRate > 40 && heartRate < 200) ? heartRate : 0;
          int sendSpO2 = (validSPO2 == 1 && spo2 > 80 && spo2 <= 100) ? spo2 : 0;
          float sendAvgBPM = (validReadings > 0) ? avgHeartRate : 0;
          
          payload = "{\"BPM\":" + String(sendBPM) + 
                   ", \"AvgBPM\":" + String(sendAvgBPM, 1) + 
                   ", \"SpO2\":" + String(sendSpO2) + 
                   ", \"Battery\":" + String(batteryPercent) + 
                   ", \"Status\":\"" + status + "\"" +
                   ", \"timestamp\":" + String(millis()) + "}";
        }
        
        mqttSuccess = client.publish("v1/devices/me/telemetry", payload.c_str());
        lastMqttSend = millis();
        
        Serial.print(" | MQTT: ");
        Serial.println(mqttSuccess ? "‚úÖ OK" : "‚ùå FAIL");
        
        if (!mqttSuccess) {
          Serial.println("üîÑ MQTT publish failed, checking connection...");
        }
      } else {
        Serial.println(" | MQTT: ‚ùå DISCONNECTED");
      }
    }

    // C·∫≠p nh·∫≠t OLED
    display.clearDisplay();
    display.setCursor(0,0);
    
    if(irBuffer[99] < 50000) {
      display.print("BPM: -- \n");
      display.print("Avg BPM: -- \n");
      display.print("SpO2: -- \n");
    } else {
      display.print("BPM: ");
      display.println((validHeartRate == 1 && heartRate > 40 && heartRate < 200) ? heartRate : 0);
      display.print("Avg BPM: ");
      display.println((validReadings > 0) ? avgHeartRate : 0, 1);
      display.print("SpO2: ");
      display.println((validSPO2 == 1 && spo2 > 80 && spo2 <= 100) ? spo2 : 0);
    }
    
    display.print("Pin: ");
    display.print(batteryPercent);
    display.println("%");
    display.print("WiFi: ");
    display.println(WiFi.status() == WL_CONNECTED ? "OK" : "FAIL");
    display.print("MQTT: ");
    display.println(client.connected() ? "OK" : "FAIL");
    display.display();
    
    // Ng·∫Øt ngh·ªâ ng·∫Øn ƒë·ªÉ tr√°nh watchdog timer reset tr√™n ESP32
    yield();
    delay(100);
  }
}